{"version":3,"file":"static/js/254.e0f0769e.chunk.js","mappings":"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","sources":["components/ContactForm/ContactForm.styled.js","redux/contacts/selectors.js","components/ContactForm/ContactForm.js","components/ContactItem/ContactItem.styled.js","components/ContactItem/ContactItem.js","components/ContactList/ContactList.styled.js","components/ContactList/ContactList.js","components/Filter/Filter.styled.js","components/Filter/Filter.js","pages/Contacts/Contacts.js"],"sourcesContent":["import styled from 'styled-components';\nimport { Field, ErrorMessage, Form } from 'formik';\n\nexport const ContactFormForm = styled(Form)`\ndisplay: flex;\nflex-direction: column;\nmargin-right: auto;\nmargin-left: auto; \nmax-width: 400px;\n`;\n\nexport const ContactFormLabel = styled.label`\nmargin-top: ${p => p.theme.spasing(4)};\ndisplay: flex;\nflex-direction: column;\n`;\n\nexport const ContactFormField = styled(Field)`\n  border-radius: 8px;\n  outline: none;\n  border: 1px solid ${p => p.theme.colors.Indigo};  \n  margin-bottom: ${p => p.theme.spasing(1)};\n  padding:${p => p.theme.spasing(1)};  \n`;\n\nexport const ContactFormError = styled(ErrorMessage)`\ncolor: ${p => p.theme.colors.Crimson};\nfont-size: 16px;\n`;\n\nexport const ContactFormButton = styled.button`\n  width: 150px;\n  padding:  ${p => p.theme.spasing(2)}  ${p => p.theme.spasing(2)}; \n  background-color: ${p => p.theme.colors.white};   \n  border-radius: ${p => p.theme.radii.lg}; \n  border: 1px solid ${p => p.theme.colors.Indigo};    \n  cursor: pointer;\n  transition: background-color 250ms cubic-bezier(0.4, 0, 0.2, 1); \n  &:hover,\n  &:focus {\n    background-color: ${p => p.theme.colors.blue}; \n  } \n  margin-top: ${p => p.theme.spasing(5)};\n  margin-right: auto;\n  margin-left: auto;   \n`;","import { createSelector } from \"@reduxjs/toolkit\";\n\nexport const selectContacts = state => state.contacts.items;\n\nexport const selectFilter = state => state.filter;\n\nexport const selectIsLoading = state => state.contacts.isLoading;\n\nexport const selectError = state => state.contacts.error;\n\nexport const selectVisibleContacts = createSelector(\n  [selectContacts, selectFilter],\n  (contacts, filter) => {\n    return contacts.filter(contact => contact.name.toLowerCase()\n      .includes(filter.toLowerCase().trim()))\n  }\n);","import * as Yup from 'yup';\nimport { Formik } from 'formik';\nimport { ContactFormButton, ContactFormError, ContactFormField, ContactFormForm, ContactFormLabel } from './ContactForm.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport toast from 'react-hot-toast';\nimport { selectContacts } from 'redux/contacts/selectors';\nimport { addContact } from 'redux/contacts/operations';\n\n const validationSchema = Yup.object().shape({\n  name: Yup.string()\n    .min(2, 'Name must contain at least 2 characters')\n    .max(40, 'Too long name')\n    .required('Name is required!'),\n  number: Yup.string()\n    .matches(/^\\+(?:[0-9] ?){6,14}[0-9]$/, {\n      message: 'Invalid Phone Number!',\n      excludeEmptyString: false,\n    })\n    .required('Phone number is required!')\n    .max(15, 'Invalid phone number!'),\n  });\n\nexport const ContactForm = () => {\n  const contacts = useSelector(selectContacts);\n  const dispatch = useDispatch();\n\n  const addNewContact = (newContact, { resetForm }) => {\n    if (contacts.some(contact => contact.name.toLowerCase() === newContact.name.toLowerCase())) {\n      toast.error(`${newContact.name} is already in contacts.`);\n      resetForm(); \n      return;\n    }\n    dispatch(addContact(newContact));   \n    resetForm(); \n};\n      \n  return (\n    <Formik\n      initialValues={{\n        name: '',\n        number: '',\n      }}\n      onSubmit={addNewContact}\n      validationSchema={validationSchema}\n    >\n        <ContactFormForm>\n            <ContactFormLabel htmlFor=\"name\">Name</ContactFormLabel>\n              <ContactFormField id=\"name\" type=\"text\" name=\"name\" placeholder=\"Jim Doun\" />\n              \n              <ContactFormError name=\"name\" component=\"div\" />      \n              \n            <ContactFormLabel htmlFor=\"number\">Number</ContactFormLabel>\n              <ContactFormField id=\"number\" type=\"tel\" name=\"phone\" placeholder=\"+XX...\" />\n              \n            <ContactFormError name=\"number\" component=\"div\" />\n\n            <ContactFormButton type=\"submit\">Add contact</ContactFormButton>\n        </ContactFormForm>\n    </Formik>\n  );\n};\n\n","import styled from 'styled-components';\nexport const ContactItemLi = styled.li`\n    display: flex;\n    flex-wrap: wrap;\n    align-items: center;\n    justify-content: space-between;\n`;\n\nexport const ContactItemButton = styled.button`\n  width: 60px;   \n  padding: ${p => p.theme.spasing(1)}  ${p => p.theme.spasing(1)}; \n  background-color: ${p => p.theme.colors.Tomato};   \n  border-radius: 8px;\n  border: 1px solid ${p => p.theme.colors.Indigo};    \n  cursor: pointer;\n  transition: background-color 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  &:hover,\n  &:focus {\n  background-color: ${p => p.theme.colors.blue};  \n}   \n`;","import { useDispatch } from \"react-redux\";\nimport { ContactItemButton, ContactItemLi } from \"./ContactItem.styled\";\nimport { deleteContact } from \"redux/contacts/operations\";\n\n\nexport const ContactItem = ({ contact: { id, name, number } }) => {\n  const dispatch = useDispatch();\n  const hendelDelete = () => dispatch(deleteContact(id));\n  \n  return (\n    <ContactItemLi>\n      {name}: {number}\n      <ContactItemButton onClick={hendelDelete}>Delete</ContactItemButton>\n    </ContactItemLi>\n  );\n};","import styled from 'styled-components';\nexport const ContactListUl = styled.ul`\n    display: flex;\n    flex-direction: column;\n    max-width: 380px;\n    margin-left: auto;\n    margin-right: auto;   \n    gap: ${p => p.theme.spasing(3)};  \n    margin-top: ${p => p.theme.spasing(2)};      \n`;","import { useSelector } from \"react-redux\";\nimport { ContactItem } from \"components/ContactItem/ContactItem\";\nimport { ContactListUl } from \"./ContactList.styled\";\nimport { selectVisibleContacts } from \"redux/contacts/selectors\";\n\nexport const ContactList = () => {\n  const сontacts = useSelector(selectVisibleContacts);\n \n  return (\n    <ContactListUl>\n      {сontacts.map(contact => (\n        <ContactItem\n          key={contact.id}\n          contact={contact}        \n        />\n      ))}\n    </ContactListUl>\n  );\n};","import styled from 'styled-components';\nexport const FilterDiv = styled.div`\n  display: flex;\n  flex-direction: column;\n  max-width: 400px;\n  margin-right: auto;\n  margin-left: auto;\n`;\n\nexport const FilterLabel = styled.label`\n    display: flex;\n    flex-direction: column;\n    max-width: 400px;\n    margin-top: ${p => p.theme.spasing(4)}; \n`;\n\nexport const FilterInput = styled.input`  \n  width: 100%;\n  border-radius: 8px;\n  outline: none;\n  border: 1px solid ${p => p.theme.colors.Indigo};  \n  margin-bottom: ${p => p.theme.spasing(1)};\n  padding:${p => p.theme.spasing(1)};  \n`;","import { useDispatch, useSelector } from \"react-redux\";\nimport { FilterDiv, FilterInput, FilterLabel } from \"./Filter.styled\";\nimport { filteredContacts} from \"redux/contacts/filterSlice\";\nimport { selectFilter } from \"redux/contacts/selectors\";\n\nexport const Filter = () => {\n    const filter = useSelector(selectFilter);\n    const dispatch = useDispatch();\n    const hendelFiltered = (e) => dispatch(filteredContacts(e.target.value));\n\n        return (\n            <FilterDiv>\n                <FilterLabel htmlFor=\"filter\">Find contacts by name</FilterLabel>\n                <FilterInput\n                    type=\"text\"\n                    name=\"filter\"\n                    id=\"filter\"\n                    value={filter}\n                    onChange={hendelFiltered} \n                />\n            </FilterDiv>\n        );\n};\n\n","import { ContactForm } from \"components/ContactForm/ContactForm\";\nimport { ContactList } from \"components/ContactList/ContactList\";\nimport { Filter } from \"components/Filter/Filter\";\nimport { Loader } from \"components/Loader/Loader\";\nimport { useEffect } from \"react\";\nimport toast from \"react-hot-toast\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { fetchContacts } from \"redux/contacts/operations\";\nimport { selectContacts, selectError, selectIsLoading } from \"redux/contacts/selectors\";\n\nexport default function Contacts() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n  const contacts = useSelector(selectContacts)\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <ContactForm /> \n         {isLoading && !error && <Loader />}\n         {error && (toast.error('Oops! Something went wrong. Please try again later.'))}\n         {contacts.length > 0 ? (\n             <>\n               <h2>Contacts list</h2>              \n               <Filter />\n               <ContactList />\n             </>\n            ) : null}          \n    </>\n  );\n}"],"names":["ContactFormForm","styled","Form","_templateObject","_taggedTemplateLiteral","ContactFormLabel","_templateObject2","p","theme","spasing","ContactFormField","Field","_templateObject3","colors","Indigo","ContactFormError","ErrorMessage","_templateObject4","Crimson","ContactFormButton","_templateObject5","white","radii","lg","blue","selectContacts","state","contacts","items","selectFilter","filter","selectIsLoading","isLoading","selectError","error","selectVisibleContacts","createSelector","contact","name","toLowerCase","includes","trim","validationSchema","Yup","shape","min","max","required","number","matches","message","excludeEmptyString","ContactForm","useSelector","dispatch","useDispatch","_jsx","Formik","initialValues","onSubmit","addNewContact","newContact","_ref","resetForm","some","toast","concat","addContact","children","_jsxs","htmlFor","id","type","placeholder","component","ContactItemLi","ContactItemButton","Tomato","ContactItem","onClick","hendelDelete","deleteContact","ContactListUl","ContactList","сontacts","map","FilterDiv","FilterLabel","FilterInput","Filter","value","onChange","e","filteredContacts","target","Contacts","useEffect","fetchContacts","_Fragment","Loader","length"],"sourceRoot":""}